{"version":3,"file":"static/js/862.e33348c0.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","components/services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: 'auto', borderRadius: '50%'}} alt='error' src={img}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/image/mjolnir.png';\r\nimport useMarvelService from '../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({})\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n        const timerId = setInterval(updateChar, 50000)\r\n        return () => clearInterval(timerId)\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError()\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\r\n             getCharacter(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error) ? <View char={char}/> : null;\r\n        return (\r\n            <div className=\"randomchar\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n                <div className=\"randomchar__static\">\r\n                    <p className=\"randomchar__title\">\r\n                        Random character for today!<br/>\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n                    <p className=\"randomchar__title\">\r\n                        Or choose another one\r\n                    </p>\r\n                    <button onClick={updateChar} className=\"button button__main\">\r\n                        <div className=\"inner\">try it</div>\r\n                    </button>\r\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = char;\r\n    const imageNot = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n    return ( \r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} style={thumbnail === imageNot ? {objectFit: 'contain'} : null} alt=\"Random character\" className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description ? description.slice(0, 150) + '...' : 'Unfortunately, there is no description for this character'}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">Homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return ( \r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {useState, useEffect} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport PropTypes from 'prop-types';\r\nimport './charInfo.scss';\r\n\r\nimport useMarvelService from '../services/MarvelService';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null)\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n\r\n        const {charId} = props\r\n        if(!charId) {\r\n            return \r\n        }\r\n        clearError()\r\n            getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n    \r\n        const skeleton = char || loading || error ? null : <Skeleton/>\r\n        const errorMessage = error ? <ErrorMessage/> : null\r\n        const spinner = loading ? <Spinner/> : null \r\n        const content = !(loading || error || !char) ? <View char={char}/> : null\r\n        return (             <div className=\"char__info\">\r\n                {skeleton}\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'}\r\n    }\r\n\r\n    return ( \r\n            <>\r\n                <div className=\"char__basics\">\r\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                    <div>\r\n                        <div className=\"char__info-name\">{name}</div>\r\n                        <div className=\"char__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">Homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"char__descr\">\r\n                    {description ? description : 'Sorry no description'}\r\n                </div>\r\n                <div className=\"char__comics\">Comics: </div>\r\n                <ul className=\"char__comics-list\">\r\n                    {comics.length > 0 ? null : 'is this character no comics'}\r\n                    {\r\n                        comics.slice(0, 10).map((item, i) => {\r\n                            return ( \r\n                                <li key={i} className=\"char__comics-item\">\r\n                                    {item.name}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n         </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = { \r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import React, {useState, useEffect, useRef} from 'react';\r\nimport useMarvelService from '../services/MarvelService';\r\nimport './charList.scss';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([])\r\n    const [newItemLoading, setNewItemLoading] = useState(false)\r\n    const [offset, setOffset] = useState(210)\r\n    const [charEnded, setCharEnded] = useState(false)\r\n\r\n\r\n    const {error, loading, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true)\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n            initial ? setNewItemLoading(false) : setNewItemLoading(true) \r\n             getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList])\r\n        setNewItemLoading(newItemLoading => false)\r\n        setOffset(offset => offset + 9)\r\n        setCharEnded(charEnded => ended)\r\n    }\r\n\r\n    const arrayRef = useRef([])\r\n    const focusRef = (id) => {\r\n        arrayRef.current.forEach(item => item.classList.remove('char__item_selected'))\r\n        arrayRef.current[id].classList.add('char__item_selected')\r\n        arrayRef.current[id].focus()\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            return (\r\n                <li \r\n                    className=\"char__item\"\r\n                    tabIndex={2}\r\n                    key={item.id}\r\n                    ref={el => arrayRef.current[i] = el}\r\n                    onClick={() => { props.onCharSelected(item.id)\r\n                                     focusRef(i)}}\r\n                    onKeyPress={(e) => {\r\n                        if(e.key === ' ' || e.key === 'Enter') {\r\n                            props.onCharSelected(item.id)\r\n                            focusRef(i)\r\n                        }\r\n                    }}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n        const items = renderItems(charList);\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading && !newItemLoading  ? <Spinner/> : null;\r\n        \r\n        return (\r\n            <div className=\"char__list\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {items}\r\n                <button \r\n                    className=\"button button__main button__long\"\r\n                    disabled={newItemLoading}\r\n                    style={{'display': charEnded ? 'none' : 'block'}}\r\n                    onClick={() => onRequest(offset)}>\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true}\r\n    // }\r\n    \r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children \r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharList from '../charList/CharList';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return ( \r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback( async (url, method = \"GET\" , body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json()\r\n            setLoading(false)\r\n            return data \r\n        } catch (e) {\r\n            setLoading(false) \r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => { \r\n    const {loading, request, error, clearError} = useHttp()\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=13832a95be1beb7b652a019238c1d66a';\r\n    const _baseOffset = 210;\r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n    \r\n    //     if (!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n    \r\n    //     return await res.json();\r\n    // }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 220) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","borderRadius","alt","src","img","View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","children","slice","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","Skeleton","_Fragment","comics","imgStyle","length","map","item","i","props","charId","skeleton","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","arrayRef","useRef","focusRef","current","forEach","classList","remove","add","focus","items","arr","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}