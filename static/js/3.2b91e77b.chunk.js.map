{"version":3,"file":"static/js/3.2b91e77b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hook.js","components/services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: 'auto', borderRadius: '50%'}} alt='error' src={img}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './singleComicPage.scss';\r\nimport xMen from '../../resources/image/x-men.png';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport {useState, useEffect} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../services/MarvelService';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams()\r\n    const [comic, setComic] = useState(null)\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic()\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError()\r\n            getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic)\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null\r\n    const spinner = loading ? <Spinner/> : null \r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null\r\n\r\n    return ( \r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic\r\n    \r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">{language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback( async (url, method = \"GET\" , body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json()\r\n            setLoading(false)\r\n            return data \r\n        } catch (e) {\r\n            setLoading(false) \r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useHttp } from \"../../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => { \r\n    const {loading, request, error, clearError} = useHttp()\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=13832a95be1beb7b652a019238c1d66a';\r\n    const _baseOffset = 210;\r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n    \r\n    //     if (!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n    \r\n    //     return await res.json();\r\n    // }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 220) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","borderRadius","alt","src","img","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}